# Generated by Django 4.2.3 on 2023-07-19 15:09

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Demographic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "heard_from",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "TeSS"),
                            (2, "Host Institute Website"),
                            (3, "Email"),
                            (4, "Newsletter"),
                            (5, "Colleague"),
                            (6, "Internet search"),
                            (7, "Other"),
                        ],
                        verbose_name="Where did you hear about this course?",
                    ),
                ),
                (
                    "employment_sector",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Academia/ Research Institution"),
                            (2, "Industry"),
                            (3, "Non-Profit Organisation"),
                            (4, "Healthcare"),
                            (5, "Other"),
                        ],
                        verbose_name="Employment sector",
                    ),
                ),
                (
                    "country_employment",
                    django_countries.fields.CountryField(
                        max_length=2, verbose_name="Country of employment"
                    ),
                ),
                (
                    "gender",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Male"),
                            (2, "Female"),
                            (3, "Non-binary"),
                            (4, "Prefer not to say"),
                        ]
                    ),
                ),
                (
                    "career_stage",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Undergraduate student"),
                            (2, "Masters student"),
                            (3, "PhD candidate"),
                            (4, "Postdoctoral researcher"),
                            (5, "Senior scientist/ Principal investigator"),
                            (6, "Research assistant/ Technician"),
                            (7, "Other"),
                        ],
                        verbose_name="Career stage",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ElixirNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("node_name", models.TextField()),
                ("country", django_countries.fields.CountryField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.TextField()),
                ("date", models.DateField()),
                ("duration", models.DecimalField(decimal_places=2, max_digits=6)),
                (
                    "event_type",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Training - face to face"),
                            (2, "Training - e-learning"),
                            (3, "Training - blended"),
                            (4, "Knowledge Exchange Workshop"),
                            (5, "Hackathon"),
                        ]
                    ),
                ),
                (
                    "funding",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "ConvergeELIXIR Converge"),
                            (2, "EOSC Life"),
                            (3, "EXCELLERATE"),
                            (4, "ELIXIR Implementation Study"),
                            (5, "ELIXIR Community / Use case"),
                            (6, "ELIXIR Node"),
                            (7, "ELIXIR Hub"),
                            (8, "ELIXIR Platform"),
                            (9, "Non-ELIXIR / Non-EXCELLERATE Funds"),
                        ]
                    ),
                ),
                ("organising_institution", models.TextField()),
                ("location_city", models.TextField()),
                (
                    "location_country",
                    django_countries.fields.CountryField(max_length=2),
                ),
                (
                    "target_audience",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Academia / Research Institution"),
                            (2, "Industry"),
                            (3, "Non-profit Organisation"),
                            (4, "Healthcare"),
                        ]
                    ),
                ),
                (
                    "additional_platforms_involved",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Compute"),
                            (2, "Data"),
                            (3, "Interoperability"),
                            (4, "Tools"),
                            (5, "NA"),
                        ]
                    ),
                ),
                (
                    "communities_involved",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Human Data"),
                            (2, "Marine Metagenomics"),
                            (3, "Rare Diseases"),
                            (4, "Plant Sciences"),
                            (5, "Proteomics"),
                            (6, "Matabolomics"),
                            (7, "Galaxy"),
                            (8, "NA"),
                        ]
                    ),
                ),
                ("number_participants", models.PositiveIntegerField()),
                ("number_trainer_facilitators", models.PositiveIntegerField()),
                ("event_url", models.URLField()),
                ("short_term_feedback_completed", models.PositiveIntegerField()),
                ("long_term_feedback_completed", models.PositiveIntegerField()),
                ("demographic_entries_completed", models.PositiveIntegerField()),
                ("notes", models.TextField()),
                ("created", models.DateTimeField(auto_now=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "elixir_node",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metrics.elixirnode",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Impact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "how_long_ago",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Less than 6 months"),
                            (2, "6 months to a year"),
                            (3, "Over a year"),
                        ],
                        verbose_name="How long ago did you attend the training?",
                    ),
                ),
                (
                    "attending_reason",
                    models.PositiveIntegerField(
                        choices=[
                            (
                                1,
                                "To learn something new to aid me in my current research/ work",
                            ),
                            (2, "To learn something new for my own interests"),
                            (
                                3,
                                "To build on existing knowledge to aid me in my current research/ work",
                            ),
                            (4, "To build on existing knowledge for my own interests"),
                            (5, "Other"),
                        ],
                        verbose_name="What was your main reason for attending the training?",
                    ),
                ),
                (
                    "frequency_use_before",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Never - unaware of them"),
                            (2, "Never - aware of them, but had not used them"),
                            (3, "Never - used other service"),
                            (4, "Occasionally (once in a while to monthly)"),
                            (5, "Frequently (weekly to daily)"),
                        ],
                        verbose_name="How often did you use the tool(s)/resource(s), covered in the training, BEFORE attending the training?",
                    ),
                ),
                (
                    "frequency_use_after",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Never - unaware of them"),
                            (2, "Never - aware of them, but had not used them"),
                            (3, "Never - used other service"),
                            (4, "Occasionally (once in a while to monthly)"),
                            (5, "Frequently (weekly to daily)"),
                        ],
                        verbose_name="How often did you use the tool(s)/resource(s), covered in the training, AFTER attending the training?",
                    ),
                ),
                (
                    "can_explain",
                    models.PositiveIntegerField(
                        choices=[(1, "Yes"), (2, "No"), (2, "Maybe"), (2, "Other")],
                        verbose_name="Are you able to explain to others what you learnt in the training?",
                    ),
                ),
                (
                    "able_to_use",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Independently"),
                            (
                                2,
                                "By using training materials/ notes from the training event",
                            ),
                            (3, "With the help of an expert"),
                            (4, "Other"),
                        ],
                        verbose_name="Are you now able to use the tool(s)/resource(s) covered in the training?",
                    ),
                ),
                (
                    "how_help",
                    models.PositiveIntegerField(
                        choices=[
                            (
                                1,
                                "It did not help as I do not use the tool(s)/resource(s) covered in the training event",
                            ),
                            (2, "It enabled me to complete certain tasks more quickly"),
                            (
                                3,
                                "It has not helped yet but I anticipate a future impact",
                            ),
                            (
                                4,
                                "It improved communication with the bioinformatician/statistician analyzing my data",
                            ),
                            (5, "It improved my ability to handle data"),
                            (6, "Other"),
                        ],
                        verbose_name="How did the training event help with your work?",
                    ),
                ),
                (
                    "facilitated",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Authoring of software"),
                            (2, "Change in career"),
                            (3, "Not applicable"),
                            (4, "Other"),
                            (5, "Publication of my work"),
                            (6, "Submission of a grant application"),
                            (
                                7,
                                "Submission of my dissertation/thesis for degree purposes",
                            ),
                            (
                                8,
                                "Useful collaboration(s) with other participants/trainers from the training event",
                            ),
                        ],
                        verbose_name="Attending the training event led to/facilitated",
                    ),
                ),
                (
                    "number_shared_people",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "None"),
                            (2, "None yet, but intend to do so in the future"),
                            (3, "1-5"),
                            (4, "6-15"),
                            (5, "16-24"),
                            (6, "25+"),
                        ],
                        verbose_name="How many people have you shared the skills and/or knowledge that you learned during the training with?",
                    ),
                ),
                (
                    "recommend",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Yes, I already have"),
                            (2, "Yes, I would"),
                            (3, "Maybe"),
                            (4, "No"),
                        ],
                        verbose_name="Would you recommend this training to others?",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="metrics.event"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "frequency_use",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Frequently (weekly to daily)"),
                            (2, "Occasionally (once in a while to monthly)"),
                            (3, "Never - used other service"),
                            (4, "Never - aware of them, but not used them"),
                            (5, "Never - unaware of them"),
                        ],
                        verbose_name="Have you used the tools/resources before?",
                    ),
                ),
                (
                    "future_use",
                    models.PositiveIntegerField(
                        choices=[(1, "Yes"), (2, "No"), (3, "Maybe")],
                        verbose_name="Will you use the resources presented in future?",
                    ),
                ),
                (
                    "recommend",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Yes, I already have"),
                            (2, "Yes, I would"),
                            (3, "Maybe"),
                            (4, "No"),
                        ],
                        verbose_name="Would you recommend this training to others?",
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        choices=[
                            (5, "Excellent (5)"),
                            (4, "Very Good (4)"),
                            (3, "Good (3)"),
                            (2, "Satisfactory (2)"),
                            (1, "Poor (1)"),
                        ],
                        verbose_name="Please tell us your overall rating for the entire course",
                    ),
                ),
                (
                    "balance",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "About right"),
                            (2, "Too theoretical"),
                            (2, "Too practical"),
                        ],
                        verbose_name="Was the balance of material right?",
                    ),
                ),
                (
                    "can_contact",
                    models.PositiveIntegerField(
                        choices=[(1, "Yes"), (2, "No")],
                        verbose_name="May we contact you by email in the future for more feeback?",
                    ),
                ),
                (
                    "enjoy_most",
                    models.TextField(
                        verbose_name="What part of the training did you enjoy the most?"
                    ),
                ),
                (
                    "enjoy_least",
                    models.TextField(
                        verbose_name="What part of the training did you enjoy the least?"
                    ),
                ),
                (
                    "future_topics",
                    models.TextField(
                        verbose_name="What other topics would you like to see covered in the future?"
                    ),
                ),
                (
                    "demographic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metrics.demographic",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="metrics.event"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="demographic",
            name="event",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="metrics.event"
            ),
        ),
    ]
